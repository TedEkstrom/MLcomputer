###################################################################

#echo "Running a GPU-conatiner test"
#docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi


# Tensorflow docker
# Olika version av tenserflow: https://hub.docker.com/r/jupyter/tensorflow-notebook/tags
#docker run -it tensorflow/tensorflow bash

# Cuda
# Olika versioner https://hub.docker.com/r/nvidia/cuda/tags

# docker run -it nvidia/cuda:12.4.0-runtime-ubuntu22.04 bash

# Docker Hascat version
# docker run --gpus all -it dizcza/docker-hashcat /bin/bash

# Working directory
# Command: -v hostDir:containerDir -w workDir
# docker run -it --rm -v $PWD:/tmp -w /tmp tensorflow/tensorflow python ./script.py

# Exempel: -v $PWD:/tmp -w /home/$(whoami)

# https://www.tensorflow.org/install/docker
# Test: docker run -it -p 8888:8888 -v $PWD:/tmp -w /home/$(whoami) tensorflow/tensorflow:nightly-jupyter

## Denna container fungerar med jupyter och tenserflow
#FROM tensorflow/tensorflow:latest-gpu

#RUN pip install \
#        tensorflow[and-cuda] \
#        jupyterlab

#CMD jupyter-lab --ip=0.0.0.0 --no-browser --allow-root

#docker build -t tenserflow/jupyterlab .
#docker run -it -p 8888:8888 <image-namn> bash
#jupyter lab --ip 0.0.0.0 --port 8888

## Reclaime space from docker
#docker image prune --all --force

## FF example
#FROM nvidia/cuda:12.2.0-devel-ubuntu22.04
#ARG DEBIAN_FRONTEND=noninteractive

#RUN apt-get -y update 
#RUN apt-get install -y --no-install-recommends python3-pip python3-dev make build-essential \
#            libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
#            libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
#RUN python3 -m pip install --upgrade pip

#ENV HOME="/root"
#WORKDIR $HOME
#RUN apt-get install -y git
#RUN git clone --depth=1 https://github.com/pyenv/pyenv.git .pyenv
#ENV PYENV_ROOT="$HOME/.pyenv"
#ENV PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
#RUN pyenv install 3.11.9
#RUN pyenv global 3.11.9
#RUN pip install --upgrade pip

#RUN pip install --no-cache-dir  tensorflow[and-cuda]==2.15.1 keras==2.15.0 seaborn matplotlib scikit-learn jupyterlab statsmodels numpy pandas notebook jupyter_contrib_nbextensions

#CMD jupyter lab --no-browser --ip=0.0.0.0 --port=8888 --allow-root --IdentityProvider.token='' --ServerApp.password=''

# FF tips
#docker build -t tf_jupyter .
#docker run --gpus all --rm -p 8888:8888 tf_jupyter
#docker run --rm -it --gpus all -p 8888:8888 -v ~/tf_docker_jupyter:/tf_docker_jupyter -w tf_docker_jupyter tf_jupyter

#import tensorflow as tf

#print("Num GPUs Available: ", len(tf.config.experimental.list_physical_devices('GPU')))
#if tf.config.experimental.list_physical_devices('GPU'):
#    for device in tf.config.experimental.list_physical_devices('GPU'):
#        print(f"Device name: {device.name}, Device type: {device.device_type}")
#else:
#    print("No GPUs found.")




